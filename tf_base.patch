diff --git a/tensorflow/contrib/cmake/CMakeLists.txt b/tensorflow/contrib/cmake/CMakeLists.txt
index 44431d5010..cb8a7fd8c8 100644
--- a/tensorflow/contrib/cmake/CMakeLists.txt
+++ b/tensorflow/contrib/cmake/CMakeLists.txt
@@ -1,6 +1,9 @@
 # Minimum CMake required
 cmake_minimum_required(VERSION 3.5)
 
+SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
+SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
+
 if(WIN32)
        if(${CMAKE_VERSION} VERSION_LESS "3.8")
                message(WARNING "Your current cmake version is ${CMAKE_VERSION} which does not support setting the toolset architecture to x64. This may cause \"compiler out of heap space\" errors when building. Consider upgrading your cmake to > 3.8 and using the flag -Thost=x64 when running cmake. Ignore this if you are on CMake GUI.")
diff --git a/tensorflow/c/eager/c_api.cc b/tensorflow/c/eager/c_api.cc
index dfb1c9a376..248ed67450 100644
--- a/tensorflow/c/eager/c_api.cc
+++ b/tensorflow/c/eager/c_api.cc
@@ -47,10 +47,10 @@ limitations under the License.
 #include "tensorflow/core/common_runtime/rendezvous_mgr.h"
 #if !defined(IS_MOBILE_PLATFORM)
 #include "tensorflow/core/distributed_runtime/remote_device.h"
-#include "tensorflow/core/distributed_runtime/rpc/eager/grpc_eager_client.h"
-#include "tensorflow/core/distributed_runtime/rpc/grpc_channel.h"
-#include "tensorflow/core/distributed_runtime/rpc/grpc_server_lib.h"
-#include "tensorflow/core/distributed_runtime/rpc/rpc_rendezvous_mgr.h"
+//#include "tensorflow/core/distributed_runtime/rpc/eager/grpc_eager_client.h"
+//#include "tensorflow/core/distributed_runtime/rpc/grpc_channel.h"
+//#include "tensorflow/core/distributed_runtime/rpc/grpc_server_lib.h"
+//#include "tensorflow/core/distributed_runtime/rpc/rpc_rendezvous_mgr.h"
 #include "tensorflow/core/distributed_runtime/server_lib.h"
 #include "tensorflow/core/distributed_runtime/worker_env.h"
 #endif  // !IS_MOBILE_PLATFORM
@@ -195,6 +195,7 @@ tensorflow::Status UpdateTFE_ContextWithServerDef(
     }                                                   \
   } while (0);
 
+#if 0
   string worker_name =
       tensorflow::strings::StrCat("/job:", server_def.job_name(),
                                   "/replica:0/task:", server_def.task_index());
@@ -276,6 +277,8 @@ tensorflow::Status UpdateTFE_ContextWithServerDef(
       std::move(remote_eager_workers), std::move(remote_device_mgr),
       remote_contexts, r, device_mgr, keep_alive_secs,
       worker_session->cluster_flr.get());
+#endif
+  return tensorflow::Status::OK();
 #undef LOG_AND_RETURN_IF_ERROR
 }
 #endif  // !IS_MOBILE_PLATFORM

diff --git a/tensorflow/contrib/cmake/tf_core_framework.cmake b/tensorflow/contrib/cmake/tf_core_framework.cmake
index 067c299a71..51338eb082 100644
--- a/tensorflow/contrib/cmake/tf_core_framework.cmake
+++ b/tensorflow/contrib/cmake/tf_core_framework.cmake
@@ -49,7 +49,7 @@ function(RELATIVE_PROTOBUF_GENERATE_CPP SRCS HDRS ROOT_DIR)
   set(${HDRS} ${${HDRS}} PARENT_SCOPE)
 endfunction()
 
-if(NOT WIN32)
+if(NOT WIN32 AND tensorflow_ENABLE_GRPC_SUPPORT)
   function(RELATIVE_PROTOBUF_GENERATE_GRPC_CPP SRCS HDRS ROOT_DIR)
     if(NOT ARGN)
       message(SEND_ERROR "Error: RELATIVE_PROTOBUF_GENERATE_GRPC_CPP() called without any proto files")
@@ -171,6 +171,7 @@ set(tf_proto_text_srcs
     "tensorflow/core/protobuf/rewriter_config.proto"
     "tensorflow/core/protobuf/tensor_bundle.proto"
     "tensorflow/core/protobuf/saver.proto"
+    "tensorflow/core/protobuf/verifier_config.proto"
     "tensorflow/core/util/memmapped_file_system.proto"
     "tensorflow/core/util/saved_tensor_slice.proto"
 )
@@ -178,12 +178,12 @@ RELATIVE_PROTOBUF_TEXT_GENERATE_CPP(PROTO_TEXT_SRCS PROTO_TEXT_HDRS
 if(WIN32)
   add_library(tf_protos_cc ${PROTO_SRCS} ${PROTO_HDRS})
 else()
-  file(GLOB_RECURSE tf_protos_grpc_cc_srcs RELATIVE ${tensorflow_source_dir}
-      "${tensorflow_source_dir}/tensorflow/core/debug/*.proto"
-  )
-  RELATIVE_PROTOBUF_GENERATE_GRPC_CPP(PROTO_GRPC_SRCS PROTO_GRPC_HDRS
-      ${tensorflow_source_dir} ${tf_protos_grpc_cc_srcs}
-  )
+#  file(GLOB_RECURSE tf_protos_grpc_cc_srcs RELATIVE ${tensorflow_source_dir}
+#      "${tensorflow_source_dir}/tensorflow/core/debug/*.proto"
+#  )
+#  RELATIVE_PROTOBUF_GENERATE_GRPC_CPP(PROTO_GRPC_SRCS PROTO_GRPC_HDRS
+#      ${tensorflow_source_dir} ${tf_protos_grpc_cc_srcs}
+#  )
   add_library(tf_protos_cc ${PROTO_GRPC_SRCS} ${PROTO_GRPC_HDRS} ${PROTO_SRCS} ${PROTO_HDRS})
 endif()
 
@@ -272,7 +272,7 @@ if (NOT WIN32)
   add_custom_command(OUTPUT __force_rebuild COMMAND ${CMAKE_COMMAND} -E echo)
   add_custom_command(OUTPUT
       ${VERSION_INFO_CC}
-      COMMAND ${PYTHON_EXECUTABLE} ${tensorflow_source_dir}/tensorflow/tools/git/gen_git_source.py
+      COMMAND python2 ${tensorflow_source_dir}/tensorflow/tools/git/gen_git_source.py
       ARGS --raw_generate ${VERSION_INFO_CC} --source_dir ${tensorflow_source_dir} --git_tag_override=${GIT_TAG_OVERRIDE}
       DEPENDS __force_rebuild)
 endif()
diff --git a/tensorflow/contrib/cmake/tf_shared_lib.cmake b/tensorflow/contrib/cmake/tf_shared_lib.cmake
index 62005dd113..6e14b63794 100644
--- a/tensorflow/contrib/cmake/tf_shared_lib.cmake
+++ b/tensorflow/contrib/cmake/tf_shared_lib.cmake
@@ -66,7 +66,7 @@ endif(WIN32)
 
 # tensorflow is a shared library containing all of the
 # TensorFlow runtime and the standard ops and kernels.
-add_library(tensorflow SHARED
+add_library(tensorflow STATIC
     $<TARGET_OBJECTS:tf_c_eager>
     $<TARGET_OBJECTS:tf_core_eager_runtime>
     $<TARGET_OBJECTS:tf_c>
@@ -90,7 +90,7 @@ add_library(tensorflow SHARED
 target_link_libraries(tensorflow PRIVATE
     ${tf_core_gpu_kernels_lib}
     ${tensorflow_EXTERNAL_LIBRARIES}
-    tf_protos_cc
+    $<TARGET_FILE:tf_protos_cc>
 )
 
 # There is a bug in GCC 5 resulting in undefined reference to a __cpu_model function when
diff --git a/tensorflow/core/debug/debug_io_utils.cc b/tensorflow/core/debug/debug_io_utils.cc
index 9e8002d490..01f45821dd 100644
--- a/tensorflow/core/debug/debug_io_utils.cc
+++ b/tensorflow/core/debug/debug_io_utils.cc
@@ -23,10 +23,10 @@ limitations under the License.
 #include <vector>
 
 #ifndef PLATFORM_WINDOWS
-#include "grpcpp/create_channel.h"
+//#include "grpcpp/create_channel.h"
 #else
 // winsock2.h is used in grpc, so Ws2_32.lib is needed
-#pragma comment(lib, "Ws2_32.lib")
+//#pragma comment(lib, "Ws2_32.lib")
 #endif  // #ifndef PLATFORM_WINDOWS
 
 #include "tensorflow/core/debug/debug_callback_registry.h"
@@ -238,7 +238,7 @@ string AppendTimestampToFilePath(const string& in, const uint64 timestamp) {
   return out;
 }
 
-#ifndef PLATFORM_WINDOWS
+#if 0
 // Publishes encoded GraphDef through a gRPC debugger stream, in chunks,
 // conforming to the gRPC message size limit.
 Status PublishEncodedGraphDefInChunks(const string& encoded_graph_def,
@@ -369,7 +369,7 @@ Status DebugIO::PublishDebugMetadata(
   Status status;
   for (const string& url : debug_urls) {
     if (str_util::Lowercase(url).find(kGrpcURLScheme) == 0) {
-#ifndef PLATFORM_WINDOWS
+#if 0
       Event grpc_event;
 
       // Determine the path (if any) in the grpc:// URL, and add it as a field
@@ -387,7 +387,7 @@ Status DebugIO::PublishDebugMetadata(
       status.Update(
           DebugGrpcIO::SendEventProtoThroughGrpcStream(grpc_event, url, true));
 #else
-      GRPC_OSS_WINDOWS_UNIMPLEMENTED_ERROR;
+//      GRPC_OSS_WINDOWS_UNIMPLEMENTED_ERROR;
 #endif
     } else if (str_util::Lowercase(url).find(kFileURLScheme) == 0) {
       const string dump_root_dir = url.substr(strlen(kFileURLScheme));
@@ -425,7 +425,7 @@ Status DebugIO::PublishDebugTensor(const DebugNodeKey& debug_node_key,
         fail_statuses.push_back(s);
       }
     } else if (str_util::Lowercase(url).find(kGrpcURLScheme) == 0) {
-#ifndef PLATFORM_WINDOWS
+#if 0
       Status s = DebugGrpcIO::SendTensorThroughGrpcStream(
           debug_node_key, tensor, wall_time_us, url, gated_grpc);
 
@@ -434,7 +434,7 @@ Status DebugIO::PublishDebugTensor(const DebugNodeKey& debug_node_key,
         fail_statuses.push_back(s);
       }
 #else
-      GRPC_OSS_WINDOWS_UNIMPLEMENTED_ERROR;
+//      GRPC_OSS_WINDOWS_UNIMPLEMENTED_ERROR;
 #endif
     } else if (str_util::Lowercase(url).find(kMemoryURLScheme) == 0) {
       const string dump_root_dir = url.substr(strlen(kMemoryURLScheme));
@@ -498,11 +498,11 @@ Status DebugIO::PublishGraph(const Graph& graph, const string& device_name,
       status.Update(
           DebugFileIO::DumpEventProtoToFile(event, dump_root_dir, file_name));
     } else if (debug_url.find(kGrpcURLScheme) == 0) {
-#ifndef PLATFORM_WINDOWS
+#if 0
       status.Update(PublishEncodedGraphDefInChunks(buf, device_name, now_micros,
                                                    debug_url));
 #else
-      GRPC_OSS_WINDOWS_UNIMPLEMENTED_ERROR;
+//      GRPC_OSS_WINDOWS_UNIMPLEMENTED_ERROR;
 #endif
     }
   }
@@ -512,7 +512,7 @@ Status DebugIO::PublishGraph(const Graph& graph, const string& device_name,
 
 bool DebugIO::IsCopyNodeGateOpen(
     const std::vector<DebugWatchAndURLSpec>& specs) {
-#ifndef PLATFORM_WINDOWS
+#if 0
   for (const DebugWatchAndURLSpec& spec : specs) {
     if (!spec.gated_grpc || spec.url.compare(0, strlen(DebugIO::kGrpcURLScheme),
                                              DebugIO::kGrpcURLScheme)) {
@@ -531,7 +531,7 @@ bool DebugIO::IsCopyNodeGateOpen(
 
 bool DebugIO::IsDebugNodeGateOpen(const string& watch_key,
                                   const std::vector<string>& debug_urls) {
-#ifndef PLATFORM_WINDOWS
+#if 0
   for (const string& debug_url : debug_urls) {
     if (debug_url.compare(0, strlen(DebugIO::kGrpcURLScheme),
                           DebugIO::kGrpcURLScheme)) {
@@ -550,7 +550,7 @@ bool DebugIO::IsDebugNodeGateOpen(const string& watch_key,
 
 bool DebugIO::IsDebugURLGateOpen(const string& watch_key,
                                  const string& debug_url) {
-#ifndef PLATFORM_WINDOWS
+#if 0
   if (debug_url.find(kGrpcURLScheme) != 0) {
     return true;
   } else {
@@ -563,10 +563,10 @@ bool DebugIO::IsDebugURLGateOpen(const string& watch_key,
 
 Status DebugIO::CloseDebugURL(const string& debug_url) {
   if (debug_url.find(DebugIO::kGrpcURLScheme) == 0) {
-#ifndef PLATFORM_WINDOWS
+#if 0
     return DebugGrpcIO::CloseGrpcStream(debug_url);
 #else
-    GRPC_OSS_WINDOWS_UNIMPLEMENTED_ERROR;
+//    GRPC_OSS_WINDOWS_UNIMPLEMENTED_ERROR;
 #endif
   } else {
     // No-op for non-gRPC URLs.
@@ -670,7 +670,7 @@ Status DebugFileIO::RecursiveCreateDir(Env* env, const string& dir) {
   }
 }
 
-#ifndef PLATFORM_WINDOWS
+#if 0
 DebugGrpcChannel::DebugGrpcChannel(const string& server_stream_addr)
     : server_stream_addr_(server_stream_addr),
       url_(strings::StrCat(DebugIO::kGrpcURLScheme, server_stream_addr)) {}
diff --git a/tensorflow/core/debug/debug_io_utils.h b/tensorflow/core/debug/debug_io_utils.h
index c974a47051..a1132f6df3 100644
--- a/tensorflow/core/debug/debug_io_utils.h
+++ b/tensorflow/core/debug/debug_io_utils.h
@@ -252,7 +252,7 @@ struct hash<::tensorflow::DebugNodeKey> {
 
 // TODO(cais): Support grpc:// debug URLs in open source once Python grpc
 //   genrule becomes available. See b/23796275.
-#ifndef PLATFORM_WINDOWS
+#if 0
 #include "grpcpp/channel.h"
 #include "tensorflow/core/debug/debug_service.grpc.pb.h"
 

diff --git a/tensorflow/contrib/cmake/tf_tools.cmake b/tensorflow/contrib/cmake/tf_tools.cmake
index 58c7df95c8..28443c9bf6 100644
--- a/tensorflow/contrib/cmake/tf_tools.cmake
+++ b/tensorflow/contrib/cmake/tf_tools.cmake
@@ -32,7 +32,7 @@ target_link_libraries(${proto_text} PUBLIC
   tf_protos_cc
 )
 
-add_dependencies(${proto_text} tf_core_lib)
+add_dependencies(${proto_text} tf_core_lib abseil_cpp_build)
 if(tensorflow_ENABLE_GRPC_SUPPORT)
     add_dependencies(${proto_text} grpc)
 endif(tensorflow_ENABLE_GRPC_SUPPORT)
@@ -58,94 +58,94 @@ add_dependencies(tf_tools_transform_graph_lib tf_core_kernels)
 add_dependencies(tf_tools_transform_graph_lib tf_core_lib)
 add_dependencies(tf_tools_transform_graph_lib tf_core_ops)
 
-set(transform_graph "transform_graph")
-
-add_executable(${transform_graph}
-    "${tensorflow_source_dir}/tensorflow/tools/graph_transforms/transform_graph_main.cc"
-    $<TARGET_OBJECTS:tf_tools_transform_graph_lib>
-    $<TARGET_OBJECTS:tf_core_lib>
-    $<TARGET_OBJECTS:tf_core_cpu>
-    $<TARGET_OBJECTS:tf_core_framework>
-    $<TARGET_OBJECTS:tf_core_ops>
-    $<TARGET_OBJECTS:tf_core_direct_session>
-    $<TARGET_OBJECTS:tf_tools_transform_graph_lib>
-    $<TARGET_OBJECTS:tf_core_kernels>
-    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<$<BOOL:${BOOL_WIN32}>:$<TARGET_OBJECTS:tf_core_kernels_cpu_only>>>
-    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<TARGET_OBJECTS:tf_stream_executor>>
-)
-
-target_link_libraries(${transform_graph} PUBLIC
-  tf_protos_cc
-  ${tf_core_gpu_kernels_lib}
-  ${tensorflow_EXTERNAL_LIBRARIES}
-)
-
-set(summarize_graph "summarize_graph")
-
-add_executable(${summarize_graph}
-    "${tensorflow_source_dir}/tensorflow/tools/graph_transforms/summarize_graph_main.cc"
-    $<TARGET_OBJECTS:tf_tools_transform_graph_lib>
-    $<TARGET_OBJECTS:tf_core_lib>
-    $<TARGET_OBJECTS:tf_core_cpu>
-    $<TARGET_OBJECTS:tf_core_framework>
-    $<TARGET_OBJECTS:tf_core_ops>
-    $<TARGET_OBJECTS:tf_core_direct_session>
-    $<TARGET_OBJECTS:tf_tools_transform_graph_lib>
-    $<TARGET_OBJECTS:tf_core_kernels>
-    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<$<BOOL:${BOOL_WIN32}>:$<TARGET_OBJECTS:tf_core_kernels_cpu_only>>>
-    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<TARGET_OBJECTS:tf_stream_executor>>
-)
-
-target_link_libraries(${summarize_graph} PUBLIC
-  tf_protos_cc
-  ${tf_core_gpu_kernels_lib}
-  ${tensorflow_EXTERNAL_LIBRARIES}
-)
-
-set(compare_graphs "compare_graphs")
-
-add_executable(${compare_graphs}
-    "${tensorflow_source_dir}/tensorflow/tools/graph_transforms/compare_graphs.cc"
-    $<TARGET_OBJECTS:tf_tools_transform_graph_lib>
-    $<TARGET_OBJECTS:tf_core_lib>
-    $<TARGET_OBJECTS:tf_core_cpu>
-    $<TARGET_OBJECTS:tf_core_framework>
-    $<TARGET_OBJECTS:tf_core_ops>
-    $<TARGET_OBJECTS:tf_core_direct_session>
-    $<TARGET_OBJECTS:tf_tools_transform_graph_lib>
-    $<TARGET_OBJECTS:tf_core_kernels>
-    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<$<BOOL:${BOOL_WIN32}>:$<TARGET_OBJECTS:tf_core_kernels_cpu_only>>>
-    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<TARGET_OBJECTS:tf_stream_executor>>
-)
-
-target_link_libraries(${compare_graphs} PUBLIC
-  tf_protos_cc
-  ${tf_core_gpu_kernels_lib}
-  ${tensorflow_EXTERNAL_LIBRARIES}
-)
-
-set(benchmark_model "benchmark_model")
-
-add_executable(${benchmark_model}
-    "${tensorflow_source_dir}/tensorflow/tools/benchmark/benchmark_model.cc"
-    "${tensorflow_source_dir}/tensorflow/tools/benchmark/benchmark_model_main.cc"
-    $<TARGET_OBJECTS:tf_core_lib>
-    $<TARGET_OBJECTS:tf_core_cpu>
-    $<TARGET_OBJECTS:tf_core_framework>
-    $<TARGET_OBJECTS:tf_core_ops>
-    $<TARGET_OBJECTS:tf_core_direct_session>
-    $<TARGET_OBJECTS:tf_core_kernels>
-    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<$<BOOL:${BOOL_WIN32}>:$<TARGET_OBJECTS:tf_core_kernels_cpu_only>>>
-    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<TARGET_OBJECTS:tf_stream_executor>>
-)
-
-target_link_libraries(${benchmark_model} PUBLIC
-  tf_protos_cc
-  ${tf_core_gpu_kernels_lib}
-  ${tensorflow_EXTERNAL_LIBRARIES}
-)
-
-install(TARGETS ${transform_graph} ${summarize_graph} ${compare_graphs} ${benchmark_model}
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+#set(transform_graph "transform_graph")
+
+#add_executable(${transform_graph}
+#    "${tensorflow_source_dir}/tensorflow/tools/graph_transforms/transform_graph_main.cc"
+#    $<TARGET_OBJECTS:tf_tools_transform_graph_lib>
+#    $<TARGET_OBJECTS:tf_core_lib>
+#    $<TARGET_OBJECTS:tf_core_cpu>
+#    $<TARGET_OBJECTS:tf_core_framework>
+#    $<TARGET_OBJECTS:tf_core_ops>
+#    $<TARGET_OBJECTS:tf_core_direct_session>
+#    $<TARGET_OBJECTS:tf_tools_transform_graph_lib>
+#    $<TARGET_OBJECTS:tf_core_kernels>
+#    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<$<BOOL:${BOOL_WIN32}>:$<TARGET_OBJECTS:tf_core_kernels_cpu_only>>>
+#    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<TARGET_OBJECTS:tf_stream_executor>>
+#)
+
+#target_link_libraries(${transform_graph} PUBLIC
+#  tf_protos_cc
+#  ${tf_core_gpu_kernels_lib}
+#  ${tensorflow_EXTERNAL_LIBRARIES}
+#)
+
+#set(summarize_graph "summarize_graph")
+
+#add_executable(${summarize_graph}
+#    "${tensorflow_source_dir}/tensorflow/tools/graph_transforms/summarize_graph_main.cc"
+#    $<TARGET_OBJECTS:tf_tools_transform_graph_lib>
+#    $<TARGET_OBJECTS:tf_core_lib>
+#    $<TARGET_OBJECTS:tf_core_cpu>
+#    $<TARGET_OBJECTS:tf_core_framework>
+#    $<TARGET_OBJECTS:tf_core_ops>
+#    $<TARGET_OBJECTS:tf_core_direct_session>
+#    $<TARGET_OBJECTS:tf_tools_transform_graph_lib>
+#    $<TARGET_OBJECTS:tf_core_kernels>
+#    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<$<BOOL:${BOOL_WIN32}>:$<TARGET_OBJECTS:tf_core_kernels_cpu_only>>>
+#    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<TARGET_OBJECTS:tf_stream_executor>>
+#)
+
+#target_link_libraries(${summarize_graph} PUBLIC
+#  tf_protos_cc
+#  ${tf_core_gpu_kernels_lib}
+#  ${tensorflow_EXTERNAL_LIBRARIES}
+#)
+
+#set(compare_graphs "compare_graphs")
+
+#add_executable(${compare_graphs}
+#    "${tensorflow_source_dir}/tensorflow/tools/graph_transforms/compare_graphs.cc"
+#    $<TARGET_OBJECTS:tf_tools_transform_graph_lib>
+#    $<TARGET_OBJECTS:tf_core_lib>
+#    $<TARGET_OBJECTS:tf_core_cpu>
+#    $<TARGET_OBJECTS:tf_core_framework>
+#    $<TARGET_OBJECTS:tf_core_ops>
+#    $<TARGET_OBJECTS:tf_core_direct_session>
+#    $<TARGET_OBJECTS:tf_tools_transform_graph_lib>
+#    $<TARGET_OBJECTS:tf_core_kernels>
+#    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<$<BOOL:${BOOL_WIN32}>:$<TARGET_OBJECTS:tf_core_kernels_cpu_only>>>
+#    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<TARGET_OBJECTS:tf_stream_executor>>
+#)
+
+#target_link_libraries(${compare_graphs} PUBLIC
+#  tf_protos_cc
+#  ${tf_core_gpu_kernels_lib}
+#  ${tensorflow_EXTERNAL_LIBRARIES}
+#)
+
+#set(benchmark_model "benchmark_model")
+
+#add_executable(${benchmark_model}
+#    "${tensorflow_source_dir}/tensorflow/tools/benchmark/benchmark_model.cc"
+#    "${tensorflow_source_dir}/tensorflow/tools/benchmark/benchmark_model_main.cc"
+#    $<TARGET_OBJECTS:tf_core_lib>
+#    $<TARGET_OBJECTS:tf_core_cpu>
+#    $<TARGET_OBJECTS:tf_core_framework>
+#    $<TARGET_OBJECTS:tf_core_ops>
+#    $<TARGET_OBJECTS:tf_core_direct_session>
+#    $<TARGET_OBJECTS:tf_core_kernels>
+#    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<$<BOOL:${BOOL_WIN32}>:$<TARGET_OBJECTS:tf_core_kernels_cpu_only>>>
+#    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<TARGET_OBJECTS:tf_stream_executor>>
+#)
+
+#target_link_libraries(${benchmark_model} PUBLIC
+#  tf_protos_cc
+#  ${tf_core_gpu_kernels_lib}
+#  ${tensorflow_EXTERNAL_LIBRARIES}
+#)
+
+#install(TARGETS ${transform_graph} ${summarize_graph} ${compare_graphs} ${benchmark_model}
+#        RUNTIME DESTINATION bin
+#        LIBRARY DESTINATION lib
+#        ARCHIVE DESTINATION lib)
diff --git a/tensorflow/contrib/cmake/tf_core_ops.cmake b/tensorflow/contrib/cmake/tf_core_ops.cmake
index f73f89ce37..0df72649c0 100644
--- a/tensorflow/contrib/cmake/tf_core_ops.cmake
+++ b/tensorflow/contrib/cmake/tf_core_ops.cmake
@@ -92,7 +92,6 @@ GENERATE_CONTRIB_OP_LIBRARY(boosted_trees_training "${tensorflow_source_dir}/ten
 GENERATE_CONTRIB_OP_LIBRARY(boosted_trees_prediction "${tensorflow_source_dir}/tensorflow/contrib/boosted_trees/ops/prediction_ops.cc")
 GENERATE_CONTRIB_OP_LIBRARY(boosted_trees_quantiles "${tensorflow_source_dir}/tensorflow/contrib/boosted_trees/ops/quantile_ops.cc")
 GENERATE_CONTRIB_OP_LIBRARY(boosted_trees_stats_accumulator "${tensorflow_source_dir}/tensorflow/contrib/boosted_trees/ops/stats_accumulator_ops.cc")
-GENERATE_CONTRIB_OP_LIBRARY(factorization_clustering "${tensorflow_source_dir}/tensorflow/contrib/factorization/ops/clustering_ops.cc")
 GENERATE_CONTRIB_OP_LIBRARY(factorization_factorization "${tensorflow_source_dir}/tensorflow/contrib/factorization/ops/factorization_ops.cc")
 GENERATE_CONTRIB_OP_LIBRARY(framework_variable "${tensorflow_source_dir}/tensorflow/contrib/framework/ops/variable_ops.cc")
 GENERATE_CONTRIB_OP_LIBRARY(input_pipeline "${tensorflow_source_dir}/tensorflow/contrib/input_pipeline/ops/input_pipeline_ops.cc")
diff --git a/tensorflow/contrib/cmake/tf_core_kernels.cmake b/tensorflow/contrib/cmake/tf_core_kernels.cmake
index e8972098c7..f123e3d925 100644
--- a/tensorflow/contrib/cmake/tf_core_kernels.cmake
+++ b/tensorflow/contrib/cmake/tf_core_kernels.cmake
@@ -63,10 +63,8 @@ if(tensorflow_BUILD_CONTRIB_KERNELS)
       "${tensorflow_source_dir}/tensorflow/contrib/boosted_trees/ops/split_handler_ops.cc"
       "${tensorflow_source_dir}/tensorflow/contrib/boosted_trees/ops/stats_accumulator_ops.cc"
       "${tensorflow_source_dir}/tensorflow/contrib/boosted_trees/ops/training_ops.cc"
-      "${tensorflow_source_dir}/tensorflow/contrib/factorization/kernels/clustering_ops.cc"
       "${tensorflow_source_dir}/tensorflow/contrib/factorization/kernels/masked_matmul_ops.cc"
       "${tensorflow_source_dir}/tensorflow/contrib/factorization/kernels/wals_solver_ops.cc"
-      "${tensorflow_source_dir}/tensorflow/contrib/factorization/ops/clustering_ops.cc"
       "${tensorflow_source_dir}/tensorflow/contrib/factorization/ops/factorization_ops.cc"
       #"${tensorflow_source_dir}/tensorflow/contrib/ffmpeg/decode_audio_op.cc"
       #"${tensorflow_source_dir}/tensorflow/contrib/ffmpeg/encode_audio_op.cc"
@@ -110,11 +108,6 @@ if(tensorflow_BUILD_CONTRIB_KERNELS)
       "${tensorflow_source_dir}/tensorflow/contrib/tensor_forest/hybrid/core/ops/utils.cc"
       "${tensorflow_source_dir}/tensorflow/contrib/text/kernels/skip_gram_kernels.cc"
       "${tensorflow_source_dir}/tensorflow/contrib/text/ops/skip_gram_ops.cc"
-      "${tensorflow_source_dir}/tensorflow/contrib/tpu/ops/cross_replica_ops.cc"
-      "${tensorflow_source_dir}/tensorflow/contrib/tpu/ops/infeed_ops.cc"
-      "${tensorflow_source_dir}/tensorflow/contrib/tpu/ops/outfeed_ops.cc"
-      "${tensorflow_source_dir}/tensorflow/contrib/tpu/ops/replication_ops.cc"
-      "${tensorflow_source_dir}/tensorflow/contrib/tpu/ops/tpu_configuration_ops.cc"
     )
   list(APPEND tf_core_kernels_srcs ${tf_contrib_kernels_srcs})
 endif(tensorflow_BUILD_CONTRIB_KERNELS)
diff --git a/tensorflow/contrib/cmake/external/png.cmake b/tensorflow/contrib/cmake/external/png.cmake
index c102b327dc..8fad13c207 100644
--- a/tensorflow/contrib/cmake/external/png.cmake
+++ b/tensorflow/contrib/cmake/external/png.cmake
@@ -16,7 +16,7 @@ include (ExternalProject)
 include (GNUInstallDirs)
 
 set(png_INCLUDE_DIR ${CMAKE_CURRENT_BINARY_DIR}/external/png_archive)
-set(png_URL https://mirror.bazel.build/github.com/glennrp/libpng/archive/v1.6.37.tar.gz)
+set(png_URL https://github.com/glennrp/libpng/archive/v1.6.37.tar.gz)
 set(png_HASH SHA256=ca74a0dace179a8422187671aee97dd3892b53e168627145271cad5b5ac81307)
 set(png_BUILD ${CMAKE_BINARY_DIR}/png/src/png)
 set(png_INSTALL ${CMAKE_BINARY_DIR}/png/install)
diff --git a/tensorflow/contrib/cmake/external/sqlite.cmake b/tensorflow/contrib/cmake/external/sqlite.cmake
index ef9226a938..01d5b51722 100644
--- a/tensorflow/contrib/cmake/external/sqlite.cmake
+++ b/tensorflow/contrib/cmake/external/sqlite.cmake
@@ -15,7 +15,7 @@
 include (ExternalProject)
 
 set(sqlite_INCLUDE_DIR ${CMAKE_CURRENT_BINARY_DIR}/external/sqlite)
-set(sqlite_URL https://mirror.bazel.build/www.sqlite.org/2019/sqlite-amalgamation-3280000.zip)
+set(sqlite_URL https://www.sqlite.org/2019/sqlite-amalgamation-3280000.zip)
 set(sqlite_HASH SHA256=d02fc4e95cfef672b45052e221617a050b7f2e20103661cda88387349a9b1327)
 set(sqlite_BUILD ${CMAKE_CURRENT_BINARY_DIR}/sqlite/src/sqlite)
 set(sqlite_INSTALL ${CMAKE_CURRENT_BINARY_DIR}/sqlite/install)
diff --git a/tensorflow/core/protobuf/conv_autotuning.proto b/tensorflow/core/protobuf/conv_autotuning.proto
index c75f530695..cb352e158e 100644
--- a/tensorflow/core/protobuf/conv_autotuning.proto
+++ b/tensorflow/core/protobuf/conv_autotuning.proto
@@ -1,5 +1,6 @@
 // This is used for convolution logging. Also see
 // tensorflow/core/protobuf/autotuing.h
+/*
 syntax = "proto3";
 
 package tensorflow;
@@ -23,3 +24,4 @@ message ConvolutionProto {
 
   stream_executor.dnn.ActivationMode activation = 8;
 }
+*/
diff --git a/tensorflow/contrib/cmake/external/abseil_cpp.cmake b/tensorflow/contrib/cmake/external/abseil_cpp.cmake
index 53ad3648d6..aea89114ba 100644
--- a/tensorflow/contrib/cmake/external/abseil_cpp.cmake
+++ b/tensorflow/contrib/cmake/external/abseil_cpp.cmake
@@ -71,13 +71,26 @@ else (systemlib_ABSEIL_CPP)
   else()
     set(abseil_cpp_STATIC_LIBRARIES
         ${abseil_cpp_BUILD}/absl/base/libabsl_base.a
+        ${abseil_cpp_BUILD}/absl/base/libabsl_exponential_biased.a
+        ${abseil_cpp_BUILD}/absl/base/libabsl_raw_logging_internal.a
         ${abseil_cpp_BUILD}/absl/base/libabsl_spinlock_wait.a
         ${abseil_cpp_BUILD}/absl/base/libabsl_dynamic_annotations.a
         ${abseil_cpp_BUILD}/absl/base/libabsl_malloc_internal.a
         ${abseil_cpp_BUILD}/absl/base/libabsl_throw_delegate.a
         ${abseil_cpp_BUILD}/absl/numeric/libabsl_int128.a
         ${abseil_cpp_BUILD}/absl/strings/libabsl_strings.a
-        ${abseil_cpp_BUILD}/absl/strings/libstr_format_internal.a
+        ${abseil_cpp_BUILD}/absl/strings/libabsl_strings_internal.a
+        ${abseil_cpp_BUILD}/absl/strings/libabsl_str_format_internal.a
+        ${abseil_cpp_BUILD}/absl/hash/libabsl_hash.a
+        ${abseil_cpp_BUILD}/absl/container/libabsl_hashtablez_sampler.a
+        ${abseil_cpp_BUILD}/absl/synchronization/libabsl_synchronization.a
+        ${abseil_cpp_BUILD}/absl/debugging/libabsl_stacktrace.a
+        ${abseil_cpp_BUILD}/absl/debugging/libabsl_symbolize.a
+        ${abseil_cpp_BUILD}/absl/debugging/libabsl_debugging_internal.a
+        ${abseil_cpp_BUILD}/absl/debugging/libabsl_demangle_internal.a
+        ${abseil_cpp_BUILD}/absl/time/libabsl_time.a
+        ${abseil_cpp_BUILD}/absl/time/libabsl_time_zone.a
+        ${abseil_cpp_BUILD}/absl/hash/libabsl_city.a
         ${abseil_cpp_BUILD}/absl/time/libabsl_time.a
         ${abseil_cpp_BUILD}/absl/types/libabsl_bad_optional_access.a)
   endif()
@@ -85,6 +85,7 @@ else (systemlib_ABSEIL_CPP)
   ExternalProject_Add(abseil_cpp_build
       PREFIX abseil_cpp
       GIT_REPOSITORY ${abseil_cpp_URL}
+      GIT_TAG 83880e3d8ce512461c290782b541a623e50e39ef
       DOWNLOAD_DIR "${DOWNLOAD_LOCATION}"
       BUILD_IN_SOURCE 1
       BUILD_BYPRODUCTS ${abseil_cpp_STATIC_LIBRARIES}
diff --git a/tensorflow/contrib/cmake/tf_core_profiler.cmake b/tensorflow/contrib/cmake/tf_core_profiler.cmake
index b91a7f43e5..1814ba090d 100644
--- a/tensorflow/contrib/cmake/tf_core_profiler.cmake
+++ b/tensorflow/contrib/cmake/tf_core_profiler.cmake
@@ -34,5 +34,5 @@ file(GLOB_RECURSE tf_core_profiler_exclude_srcs
 )
 list(REMOVE_ITEM tf_core_profiler_srcs ${tf_core_profiler_exclude_srcs})
 
-add_library(tf_core_profiler OBJECT ${tf_core_profiler_srcs})
-add_dependencies(tf_core_profiler tf_core_lib)
\ No newline at end of file
+add_library(tf_core_profiler STATIC ${tf_core_profiler_srcs})
+add_dependencies(tf_core_profiler tf_core_lib tf_core_framework)
\ No newline at end of file
diff --git a/tensorflow/contrib/cmake/tf_cc_ops.cmake b/tensorflow/contrib/cmake/tf_cc_ops.cmake
index 6514ae50a4..77cd9e7b82 100644
--- a/tensorflow/contrib/cmake/tf_cc_ops.cmake
+++ b/tensorflow/contrib/cmake/tf_cc_ops.cmake
@@ -70,6 +70,7 @@ foreach(tf_cc_op_lib_name ${tf_cc_op_lib_names})
 
     target_link_libraries(${tf_cc_op_lib_name}_gen_cc PRIVATE
         tf_protos_cc
+        tf_core_profiler
         ${tensorflow_EXTERNAL_LIBRARIES}
     )

diff --git a/tensorflow/core/ops/tpu_embedding_ops.cc b/tensorflow/core/ops/tpu_embedding_ops.cc
index 36345ba831..ca854fb9a8 100644
--- a/tensorflow/core/ops/tpu_embedding_ops.cc
+++ b/tensorflow/core/ops/tpu_embedding_ops.cc
@@ -12,7 +12,7 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
-
+/*
 #include "tensorflow/core/framework/attr_value.pb.h"
 #include "tensorflow/core/framework/common_shape_fns.h"
 #include "tensorflow/core/framework/op.h"
@@ -232,3 +232,4 @@ REGISTER_OP("EnqueueTPUEmbeddingSparseTensorBatch")
     .SetShapeFn(shape_inference::UnknownShape);
 
 }  // namespace tensorflow
+*/
diff --git a/tensorflow/c/eager/c_api_experimental.cc b/tensorflow/c/eager/c_api_experimental.cc
index 0c170ead40..d5375683ce 100644
--- a/tensorflow/c/eager/c_api_experimental.cc
+++ b/tensorflow/c/eager/c_api_experimental.cc
@@ -13,6 +13,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
+/*
 #include "tensorflow/c/eager/c_api_experimental.h"
 
 #include "tensorflow/c/c_api.h"
@@ -518,3 +519,4 @@ TFE_MonitoringSamplerCell* TFE_MonitoringGetCellSampler2(
   return static_cast<TFE_MonitoringSamplerCell*>(
       static_cast<void*>(sampler->sampler->GetCell(label1, label2)));
 }
+*/
diff --git a/tensorflow/core/common_runtime/direct_session.cc b/tensorflow/core/common_runtime/direct_session.cc
index 9361521b80..5d6b1e5095 100644
--- a/tensorflow/core/common_runtime/direct_session.cc
+++ b/tensorflow/core/common_runtime/direct_session.cc
@@ -540,10 +540,12 @@ Status DirectSession::RunInternal(int64 step_id, const RunOptions& run_options,
     args.stats_collector = run_state.collector.get();
   }
 
+#if 0
   std::unique_ptr<ProfilerSession> profiler_session;
   if (run_options.trace_level() >= RunOptions::HARDWARE_TRACE) {
     profiler_session = ProfilerSession::Create(/*ProfilerContext*/ nullptr);
   }
+#endif
 
   if (run_options.inter_op_thread_pool() < -1 ||
       run_options.inter_op_thread_pool() >=
@@ -641,9 +643,11 @@ Status DirectSession::RunInternal(int64 step_id, const RunOptions& run_options,
     run_state.status.Update(errors::Cancelled("Run call was cancelled"));
   }
 
+#if 0
   if (profiler_session) {
     TF_RETURN_IF_ERROR(profiler_session->CollectData(run_metadata));
   }
+#endif
 
   {
     mutex_lock l(run_state.mu_);
